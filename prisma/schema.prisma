generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User{
  id  Int     @id @default(autoincrement())
  name String 
  email String @unique
  password String
  role String @default("USER")
  phone String?
  orders Order[]
  cartItems CartItem[]
  wishlist Wishlist[]
  notifications Notification[]
  addresses Address[]
  viewedProducts ViewedProduct[]
}

model Product{  
  id Int @id @default(autoincrement())
  name String
  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int 
  description String
  price Float
  stock Int
  imageUrl String
  images ProductImage[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderItems OrderItem[]
  cartItems CartItem[]
  wishlist Wishlist[]
  viewedProducts ViewedProduct[]
}

model ProductImage {
  id Int @id @default(autoincrement())
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  imageUrl String
  isPrimary Boolean @default(false)
  createdAt DateTime @default(now())
}

model Order{
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  items OrderItem[]
  total Float
  status OrderStatus @default(PENDING)
  createdAt DateTime @default(now())
}

model OrderItem{
  id Int @id @default(autoincrement())
  order Order @relation(fields: [orderId], references: [id])
  orderId Int
  product Product @relation(fields: [productId], references: [id])
  productId Int
  quantity Int
  price Float
}

model Category{
 id Int @id @default(autoincrement())
 name String
 description String?
 imageUrl String?
 featured Boolean @default(false)
 products Product[]
}

model CartItem{
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  product Product @relation(fields: [productId], references: [id])
  productId Int
  quantity Int
}

model Wishlist{
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  product Product @relation(fields: [productId], references: [id])
  productId Int
  addedAt DateTime @default(now())
}

model Notification{
  id Int @id @default(autoincrement())
  message String
  user User @relation(fields: [userId], references: [id])
  userId Int
  createdaAt DateTime @default(now())
}

model Address{
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  title String
  fullName String
  phone String
  address String
  city String
  district String?
  isDefault Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ViewedProduct{
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  product Product @relation(fields: [productId], references: [id])
  productId Int
  viewedAt DateTime @default(now())
  @@unique([userId, productId])
}

model Slider {
  id Int @id @default(autoincrement())
  title String
  description String?
  imageUrl String
  linkUrl String?
  isActive Boolean @default(true)
  order Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role{
  USER
  ADMIN
}

enum OrderStatus{
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}
